// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "PIDSubsystem1.h"
#include "../RobotMap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"
#include "../Robot.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

PIDSubsystem1::PIDSubsystem1() : PIDSubsystem("PIDSubsystem1", 4,0.1,0) {
    SetAbsoluteTolerance(0.2);
    GetPIDController()->SetContinuous(false);
    LiveWindow::GetInstance()->AddActuator("PID Subsystem 1", "PIDSubsystem Controller", GetPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    speedController1 = RobotMap::pIDSubsystem1SpeedController1;
    analogPotentiometer1 = RobotMap::pIDSubsystem1AnalogPotentiometer1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // Enable() - Enables the PID controller.
}

double PIDSubsystem1::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE

        return analogPotentiometer1->Get();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}
int runtimes = 0;
void PIDSubsystem1::UsePIDOutput(double output) {
	runtimes++;
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);
	if(Robot::oi->getXbox()->GetRawButton(4))
	{

		PIDSubsystem1::SetSetpoint(0.10);
	}
	else if(Robot::oi->getXbox()->GetRawButton(1))//down
	{

		PIDSubsystem1::SetSetpoint(0.02);
	}
	else if(Robot::oi->getXbox()->GetRawButton(2))
	{

		PIDSubsystem1::SetSetpoint(0.27);
	}

	SmartDashboard::PutNumber("gearGrab POT03",RobotMap::pIDSubsystem1AnalogPotentiometer1->Get());
	SmartDashboard::PutNumber("gearGrabLPID RUNTIMES",runtimes);

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT

	if (RobotMap::pIDSubsystem1AnalogPotentiometer1->Get()<0.32)

    speedController1->PIDWrite(output);
	else

	    speedController1->PIDWrite(-0.4);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}

void PIDSubsystem1::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
