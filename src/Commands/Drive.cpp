// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Drive.h"
#include "SmartDashboard/SmartDashboard.h"
#include "../Robot.h"
#include "../RobotMap.h"
//
//
double drive_ticks = 0;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Drive::Drive(double fwd_back, double left_right): Command() {
    m_fwd_back = fwd_back;
    m_left_right = left_right;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    drive_ticks++;
    SmartDashboard::PutNumber("DRIVE-TICKS",drive_ticks);
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR




// Called just before this Command runs the first time
void Drive::Initialize() {

}
double driveexecute_Ticks = 0;
// Called repeatedly when this Command is scheduled to run
//bool onlyOnce = false;
double encodersSetValue = 0;//////?TESTTESTESTESTSETSETSETSETSETSETSETETESTTESTESTESTESTESTESTESTSE
double gearArmCurrentLocation = 0;
//double geararmupvalue=195;
void Drive::Execute() {


	//Set Gear Arm Current Location FINAL BUILD
	//Set Gear Arm Location
	if (Robot::oi->getXbox2()->GetRawButton(2))
	{
		gearArmCurrentLocation=20;
	}
	else if (Robot::oi->getXbox2()->GetRawButton(3))
	{
		gearArmCurrentLocation=-20;
	}
	else
	{
		gearArmCurrentLocation=0;

	}
	//Gear Arm sSet
	if (gearArmCurrentLocation<RobotMap::gearGrab1->GetDistance()&&gearArmCurrentLocation-RobotMap::gearGrab1->GetDistance()<-2)
	{
		//RobotMap::gearGrab1Motor->Set(-0.3);
		//SmartDashboard::PutNumber("gearGrab1Motor",-0.3);
		if ( gearArmCurrentLocation-RobotMap::gearGrab1->GetDistance()<-5)
		{

			RobotMap::gearGrab1Motor->Set(-0.3);
			SmartDashboard::PutNumber("gearGrab1Motor",-0.3);
		}
		else
		{
			RobotMap::gearGrab1Motor->Set(-0.1);
			SmartDashboard::PutNumber("gearGrab1Motor",-0.1);
		}

	}
	else if (gearArmCurrentLocation>RobotMap::gearGrab1->GetDistance()&&gearArmCurrentLocation-RobotMap::gearGrab1->GetDistance()>2)
	{

		//RobotMap::gearGrab1Motor->Set(0.3);
		//SmartDashboard::PutNumber("gearGrab1Motor",0.3);
		if ( gearArmCurrentLocation-RobotMap::gearGrab1->GetDistance()>5)
				{

					RobotMap::gearGrab1Motor->Set(0.3);
					SmartDashboard::PutNumber("gearGrab1Motor",0.3);
				}
				else
				{
					RobotMap::gearGrab1Motor->Set(0.1);
					SmartDashboard::PutNumber("gearGrab1Motor",0.1);
				}
	}
	else
	{

		RobotMap::gearGrab1Motor->Set(0);
		SmartDashboard::PutNumber("gearGrab1Motor",0);
	}
	//Invert these values:
	if (-gearArmCurrentLocation<RobotMap::gearGrab2->GetDistance()&&-gearArmCurrentLocation-RobotMap::gearGrab2->GetDistance()<-2)
		{
			//RobotMap::gearGrab2Motor->Set(-0.3);
		//SmartDashboard::PutNumber("gearGrab2Motor",-0.3);
				if (- gearArmCurrentLocation-RobotMap::gearGrab2->GetDistance()<-5)
				{

					RobotMap::gearGrab2Motor->Set(-0.3);
					SmartDashboard::PutNumber("gearGrab2Motor",-0.3);
				}
				else
				{
					RobotMap::gearGrab2Motor->Set(-0.1);
					SmartDashboard::PutNumber("gearGrab2Motor",-0.1);
				}

		}
		else if (-gearArmCurrentLocation>RobotMap::gearGrab2->GetDistance()&&-gearArmCurrentLocation-RobotMap::gearGrab2->GetDistance()>2)
		{

			//RobotMap::gearGrab2Motor->Set(0.3);
			//SmartDashboard::PutNumber("gearGrab2Motor",0.3);
			if ( -gearArmCurrentLocation-RobotMap::gearGrab2->GetDistance()>5)
					{

						RobotMap::gearGrab2Motor->Set(0.3);
						SmartDashboard::PutNumber("gearGrab2Motor",0.3);
					}
					else
					{
						RobotMap::gearGrab2Motor->Set(0.1);
						SmartDashboard::PutNumber("gearGrab2Motor",0.1);
					}
		}
		else
		{

			RobotMap::gearGrab2Motor->Set(0);
			SmartDashboard::PutNumber("gearGrab2Motor",0);
		}
	//Gear Lift Presets
	/*
	if(Robot::oi->getXbox()->GetRawButton(4))
	{
		geararmupvalue = 310;
	}
	else if(Robot::oi->getXbox()->GetRawButton(1))//down
	{
		geararmupvalue = 167;
	}
	else if(Robot::oi->getXbox()->GetRawButton(2))
	{
		geararmupvalue = 195;
	}*/
	//Set Gear Arm Current Location
//N
	/*if (geararmupvalue<RobotMap::gearGrabPot->Get()&&geararmupvalue-RobotMap::gearGrabPot->Get()<-5)
		{
			//RobotMap::gearGrab1Motor->Set(-0.3);
			//SmartDashboard::PutNumber("gearGrab1Motor",-0.3);
			if ( geararmupvalue-RobotMap::gearGrabPot->Get()<-30&&RobotMap::gearGrabPot->Get()>230)
			{

				RobotMap::gearLiftMotor->Set(-1);
				SmartDashboard::PutNumber("gearLiftMotor",-1);
			}
			else if ( geararmupvalue-RobotMap::gearGrabPot->Get()<-30)
			{

				RobotMap::gearLiftMotor->Set(-0.6);
				SmartDashboard::PutNumber("gearLiftMotor",-0.6);
			}
			else
			{
				RobotMap::gearLiftMotor->Set(-0.6);
				SmartDashboard::PutNumber("gearLiftMotor",-0.6);
			}

		}
		else if (geararmupvalue>RobotMap::gearGrabPot->Get()&&geararmupvalue-RobotMap::gearGrabPot->Get()>5)
		{

			//RobotMap::gearGrab1Motor->Set(0.3);
			//SmartDashboard::PutNumber("gearGrab1Motor",0.3);
			if ( geararmupvalue-RobotMap::gearGrabPot->Get()>30)
					{

						RobotMap::gearLiftMotor->Set(1);
						SmartDashboard::PutNumber("gearLiftMotor",1);
					}
					else
					{
						RobotMap::gearLiftMotor->Set(0.6);
						SmartDashboard::PutNumber("gearLiftMotor",0.6);
					}
		}
		else
		{

			RobotMap::gearLiftMotor->Set(0);
			SmartDashboard::PutNumber("gearLiftMotor",0);
		}*/

	//END N
	/*

	encodersSetValue =-1*( (Robot::oi->getXbox2()->GetPOV()*420)/360);

	SmartDashboard::PutNumber("POV COUNT XBOX2",Robot::oi->getXbox2()->GetPOV());
		if (Robot::oi->getXbox2()->GetRawButton(1))
		{//GearGrab


			RobotMap::gearGrab1Motor->Set(Robot::oi->getXbox2()->GetRawAxis(1));

			SmartDashboard::PutNumber("gearGrab1Motor",Robot::oi->getXbox2()->GetRawAxis(1));

		}
		else if (encodersSetValue<RobotMap::gearGrab1->GetDistance()&&encodersSetValue-RobotMap::gearGrab1->GetDistance()<-2)
		{
			if ( encodersSetValue-RobotMap::gearGrab1->GetDistance()<-20)
			{

				RobotMap::gearGrab1Motor->Set(-1);
				SmartDashboard::PutNumber("gearGrab1Motor",-1);
			}
			else
			{
			RobotMap::gearGrab1Motor->Set(-0.1);
			SmartDashboard::PutNumber("gearGrab1Motor",-0.1);
			}
		}
		else if (encodersSetValue>RobotMap::gearGrab1->GetDistance()&&encodersSetValue-RobotMap::gearGrab1->GetDistance()>2)
		{
			if ( encodersSetValue-RobotMap::gearGrab1->GetDistance()>20)
			{

				RobotMap::gearGrab1Motor->Set(1);
				SmartDashboard::PutNumber("gearGrab1Motor",1);
			}
			else
			{
			RobotMap::gearGrab1Motor->Set(0.1);
			SmartDashboard::PutNumber("gearGrab1Motor",0.1);
			}
		}
		else
		{

			RobotMap::gearGrab1Motor->Set(0);
			SmartDashboard::PutNumber("gearGrab1Motor",0);
		}
		*/
	//This is for the shooter. It is on xbox 2.
/*	if (Robot::oi->getXbox2()->GetRawButton(6))
		{//Shooter


		RobotMap::shooterMotor->Set(Robot::oi->getXbox2()->GetRawAxis(3));

		SmartDashboard::PutNumber("SHOOTER",Robot::oi->getXbox2()->GetRawAxis(3));
		}
	else
	{

		RobotMap::shooterMotor->Set(0);
		SmartDashboard::PutNumber("SHOOTER",0);
	}*/
	//Movememnt
	/*if (Robot::oi->getXbox()->GetRawButton(1))
	{

	}*/

	if (Robot::oi->getXbox()->GetRawAxis(1)>0.15||Robot::oi->getXbox()->GetRawAxis(1)<-0.15)
		{

			double val1 = Robot::oi->getXbox()->GetRawAxis(4);//ANgle
			double val2 = Robot::oi->getXbox()->GetRawAxis(1);//Move
			if (val1<-0.15||val1>0.15)
			{
				//val1 = val1;//Greater precision :)
			}
			else
			{
				val1 = 0;
			}
			if (val2<-0.15||val2>0.15)
			{
			}
			else
			{
				val2 = 0;
			}


			if (val1>0.5)
			val1 = 0.5;//Wow... that turns fast without /
			if (val1<-0.5)
			val1 = -0.5;//Wow... that turns fast without /

			//RobotMap::driveTrainRobotDrive->TankDrive(val1,-val2,false);

			//This is what they used to use. Perhaps again? (DISABLE FOR TOURNAMENT)
			//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ DISALBE FOR TOURNAMENT
			if (SmartDashboard::GetNumber("DB/Slider 0",2.5)!=0)//No 0...
			RobotMap::driveTrainRobotDrive->ArcadeDrive(val2,-((val1+((SmartDashboard::GetNumber("DB/Slider 0",2.5)-2.5)/2.5))/2),0);
			else
			RobotMap::driveTrainRobotDrive->ArcadeDrive(val2,-((val1)/2),0);


			SmartDashboard::PutNumber("TESTVAR1",val1);
			SmartDashboard::PutNumber("TESTVAR2",val2);
			//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

			//SmartDashboard::PutNumber("MOTORANGLECURRENT",-((val1+((SmartDashboard::GetNumber("DB/Slider 0",2.5)-2.5)/2.5))/2));

		}
		else if (Robot::oi->getXbox()->GetRawAxis(4)>0.15||Robot::oi->getXbox()->GetRawAxis(4)<-0.15)
		{//Dime
			float val1 = Robot::oi->getXbox()->GetRawAxis(4);//ANgle
						if (val1<-0.15||val1>0.15)
						{
							//JUst for a lol make a variable for this axis... spinning fast is fun
							//SmartDashboard::
							if (val1>0.5)
							val1 = 0.5;//Wow... that turns fast without /
							if (val1<-0.5)
													val1 = -0.5;//Wow... that turns fast without /

						}
						else
						{
							val1 = 0;
						}
						RobotMap::driveTrainRobotDrive->TankDrive(val1,-val1,false);//Inverts could be wrong
		}



	SmartDashboard::PutNumber("LEFT-ENCODER",-1*RobotMap::driveTrainLeftEncoder->GetDistance());//Left encoder needs to be inverted
	SmartDashboard::PutNumber("RIGHT-ENCODER",RobotMap::driveTrainRightEncoder->GetDistance());
	SmartDashboard::PutNumber("gearGrab1 ENcoder",RobotMap::gearGrab1->GetDistance());
	SmartDashboard::PutNumber("gearGrab2 ENcoder",RobotMap::gearGrab2->GetDistance());
	SmartDashboard::PutNumber("gearGrab POT03",RobotMap::gearGrabPot->Get());


}

// Make this return true when this Command no longer needs to run execute()
bool Drive::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void Drive::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Drive::Interrupted() {

}
