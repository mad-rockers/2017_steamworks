// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousCommand.h"
#include "SmartDashboard/SmartDashboard.h"
#include "../Robot.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousCommand::AutonomousCommand(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {

}
int stage = 0;
int stagesub = 0;
// Called repeatedly when this Command is scheduled to run
int runtimes = 0;
int initoffseta = 0;
int initoffsetb = 0;
void AutonomousCommand::Execute() {
	if (runtimes==1)
	{
		initoffseta = RobotMap::driveTrainLeftEncoder->GetDistance();
		initoffsetb = RobotMap::driveTrainRightEncoder->GetDistance();

	}
	if (runtimes>1)
	{
		//Initial Move

		float mova = 0;
		float movb = 0;
		if (-1*(RobotMap::driveTrainLeftEncoder->GetDistance()-initoffseta)<2000)//Subtract ~160 from any distance wanted
		{
			mova=0.5;
		}
		if ((RobotMap::driveTrainRightEncoder->GetDistance()-initoffsetb)<2000)
		{
			movb = 0.5;
		}
		RobotMap::driveTrainRobotDrive->TankDrive(-mova,-movb,false);//Values are negative
		SmartDashboard::PutNumber("led",-1*(RobotMap::driveTrainLeftEncoder->GetDistance()-initoffseta));//Left encoder needs to be inverted

		//SmartDashboard::PutNumber("LEFT-ENCODER",-1*RobotMap::driveTrainLeftEncoder->GetDistance());//Left encoder needs to be inverted
		//SmartDashboard::PutNumber("RIGHT-ENCODER",RobotMap::driveTrainRightEncoder->GetDistance());
	}
	runtimes++;
}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {

}
